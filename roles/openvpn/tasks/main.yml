---
- name: Install OpenVPN and Easy-RSA
  package:
    name:
      - openvpn
      - easy-rsa
    state: present
  when: ansible_facts.os_family == 'Debian' or ansible_facts.os_family == 'RedHat'

- name: Ensure Easy-RSA directory exists
  file:
    path: "{{ easy_rsa_dir }}"
    state: directory

- name: Initialize PKI if not already initialized
  shell: "{{ easy_rsa_dir }}/easyrsa init-pki"
  args:
    chdir: "{{ easy_rsa_dir }}"
    creates: "{{ easy_rsa_dir }}/pki"

- name: Ensure Easy-RSA vars file exists
  template:
    src: "vars.j2"
    dest: "{{ easy_rsa_dir }}/pki/vars"

# - name: Ensure Easy-RSA vars file exists
#   copy:
#     dest: "{{ easy_rsa_dir }}/vars"
#     content: |
#       set_var EASYRSA_REQ_COUNTRY    "US"
#       set_var EASYRSA_REQ_PROVINCE   "California"
#       set_var EASYRSA_REQ_CITY       "San Francisco"
#       set_var EASYRSA_REQ_ORG        "MyVPN"
#       set_var EASYRSA_REQ_EMAIL      "admin@example.com"
#       set_var EASYRSA_REQ_OU         "MyVPN_CA"
#     force: no
#   environment:
#     - EASYRSA_PKI: "{{ easy_rsa_dir }}/pki"
#     - EASYRSA_VARS_FILE: "{{ easy_rsa_dir }}/vars"


- name: Build CA if not already built
  shell: |
    export EASYRSA_PKI="{{ easy_rsa_dir }}/pki"
    export EASYRSA_VARS_FILE="{{ easy_rsa_dir }}/pki/vars"
    {{ easy_rsa_dir }}/easyrsa build-ca nopass
  args:
    chdir: "{{ easy_rsa_dir }}"
    creates: "{{ easy_rsa_dir }}/pki/ca.crt"


- name: Generate server certificate and key if not present
  shell: "{{ easy_rsa_dir }}/easyrsa build-server-full server nopass"
  args:
    chdir: "{{ easy_rsa_dir }}"
    creates: "{{ easy_rsa_dir }}/pki/issued/server.crt"

- name: Generate DH parameters if not exist
  shell: openssl dhparam -out pki/dh.pem 2048
  args:
    chdir: "{{ easy_rsa_dir }}"
    creates: "{{ easy_rsa_dir }}/pki/dh.pem"

- name: Copy server certificates to OpenVPN directory
  copy:
    src: "{{ easy_rsa_dir }}/pki/{{ item.src }}"
    dest: "{{ openvpn_dir }}/{{ item.dest }}"
    remote_src: true
    owner: root
    group: root
    mode: '0644'
  loop:
    - { src: ca.crt, dest: server/ca.crt }
    - { src: issued/server.crt, dest: server/server.crt }
    - { src: private/server.key, dest: server/server.key }  
    - { src: dh.pem, dest: server/dh.pem }  
  notify: Restart OpenVPN

- name: Ensure OpenVPN server configuration
  template:
    src: "server.conf.j2"
    dest: "{{ openvpn_dir }}/server.conf"

- name: Restart OpenVPN service
  service:
    name: openvpn@server
    state: restarted

- name: Manage client certificates
  block:
    - name: Check existing client certificates
      shell: |
        {{ easy_rsa_dir }}/easyrsa show-cert {{ item.name }} | grep "Not After" || true
      args:
        chdir: "{{ easy_rsa_dir }}"
      register: cert_check
      with_items: "{{ users }}"
      failed_when: false

    - name: Revoke old client certificates if needed
      shell: "{{ easy_rsa_dir }}/easyrsa revoke {{ item.item.name }}"
      args:
        chdir: "{{ easy_rsa_dir }}"
      when: "'Not After' in item.stdout"
      with_items: "{{ cert_check.results }}"

    - name: Build new client certificates if missing or revoked
      shell: "{{ easy_rsa_dir }}/easyrsa build-client-full {{ item.item.name }} nopass"
      args:
        chdir: "{{ easy_rsa_dir }}"
      when: "'Not After' not in item.stdout"
      with_items: "{{ cert_check.results }}"

    - name: Create client configuration directories
      ansible.builtin.file:
        path: "{{ client_config_dir }}"
        state: directory

    - name: Create client configuration file on the server
      template:
        src: "client.ovpn.j2"
        dest: "{{ client_config_dir }}/{{ item.name }}.ovpn"
      with_items: "{{ users }}"

    - name: Copy client configuration files to local machine
      fetch:
        src: "{{ client_config_dir }}/{{ item.name }}.ovpn"
        dest: "~/{{ item.name }}.ovpn"
        flat: yes
      with_items: "{{ users }}"



    - name: Create client configuration file
      template:
        src: "client.ovpn.j2"
        dest: "{{ client_config_dir }}/{{ item.name }}.ovpn"
      with_items: "{{ users }}"

    - name: Copy client private keys to local machine
      fetch:
        src: "{{ easy_rsa_dir }}/pki/private/{{ item.name }}.key"
        dest: "{{ client_config_dir }}/{{ item.name }}.key"
        flat: yes
      with_items: "{{ users }}"

    - name: Copy client certificates to local machine
      fetch:
        src: "{{ easy_rsa_dir }}/pki/issued/{{ item.name }}.crt"
        dest: "{{ client_config_dir }}/{{ item.name }}.crt"
        flat: yes
      with_items: "{{ users }}"



- name: Notify user of new configurations
  debug:
    msg: "Client configurations are available in {{ client_config_dir }}."

